# Define o nome do workflow na interface do GitHub
name: Fábrica de Software Automatizada - CI/CD

# Gatilhos que iniciam a execução do workflow
on:
  push:
    # O pipeline será acionado a cada push nas branches 'main' e 'staging'
    branches:
      - main
      - staging
  pull_request:
    # O pipeline será acionado a cada PR para as branches 'main' e 'staging'
    branches:
      - main
      - staging
  workflow_dispatch: # Permite acionar o pipeline manualmente

# Define os jobs (etapas) do pipeline
jobs:
  # Job 1: Build da aplicação e execução de testes
  build-and-test:
    # O job será executado em um ambiente Ubuntu
    runs-on: ubuntu-latest
    steps:
      # Step 1: Faz o checkout do código do repositório
      - name: Checkout do Código
        uses: actions/checkout@v4
        with:
          # É necessário um fetch completo para que o SonarCloud funcione corretamente
          fetch-depth: 0

      # Step 2: Configura o ambiente Node.js
      - name: Configurar Node.js (v20) e Cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      # Step 3: Instala as dependências do Node.js
      - name: Instalar dependências Node.js
        run: npm install

      # Step 4: Executa os testes unitários e de integração (Jest)
      - name: Executar testes unitários/integração Node.js (Jest)
        run: npm test

  # Job 2: Análise de Qualidade de Código e Segurança (SAST) com SonarCloud
  sonarcloud-analysis:
    # O job será executado em um ambiente Ubuntu
    runs-on: ubuntu-latest
    # Este job só roda APÓS o job 'build-and-test' ter sido concluído com sucesso
    needs: build-and-test
    steps:
      # Step 1: Faz o checkout do código do repositório
      - name: Checkout do Código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Novamente, necessário para a análise completa

      # Step 2: Executa a análise do SonarScanner CLI
      - name: Executar Análise SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectKey: 'ci-cd-app-test'
          organization: 'marcusvll'

  # Job 3: Deploy da aplicação para o ambiente de staging
  deploy-to-staging:
    runs-on: ubuntu-latest
    # Este job roda se os jobs de CI e SAST passarem, e o push for para 'staging'
    needs: [build-and-test, sonarcloud-analysis]
    if: success() && github.ref == 'refs/heads/staging'
    steps:
      - name: Aguardar Deploy do Render
        # Como o deploy do Render é automático, usamos este passo para garantir que a
        # URL do ambiente de staging está online antes de continuar.
        run: |
          npm install -g wait-on
          wait-on https://ci-cd-app-test-staging.onrender.com -t 180000

  # Job 4: Análise Dinâmica de Segurança (DAST) com OWASP ZAP
  dast-scan:
    runs-on: ubuntu-latest
    # Este job só roda APÓS a aplicação ter sido deployada no ambiente de staging
    needs: deploy-to-staging
    if: success()
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4
      
      - name: Executar Análise DAST com OWASP ZAP
        run: |
          echo "Iniciando a análise DAST com OWASP ZAP..."
          # Define a URL do ambiente de staging
          export TARGET_URL="https://ci-cd-app-test-staging.onrender.com"

          docker run --rm \
            -v $(pwd)/zap-reports:/zap/wrk:rw \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t $TARGET_URL

  # Job 5: Deploy da Imagem Docker (apenas na branch 'main')
  deploy-docker:
    runs-on: ubuntu-latest
    # Este job só roda se as etapas de CI, SAST e DAST passarem
    needs: [dast-scan, sonarcloud-analysis]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      # Step 1: Configura o Docker Buildx para construir a imagem
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Step 2: Faz login no Docker Hub usando secrets
      - name: Fazer Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Step 3: Constrói e envia a imagem para o Docker Hub com uma tag
      - name: Construir e Enviar Imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ci-cd-app-test:latest
