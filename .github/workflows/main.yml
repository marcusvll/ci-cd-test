# .github/workflows/main.yml
name: Fábrica de Software Automatizada - CI/CD

on:
  push:
    branches:
      - main # Dispara o workflow em push para a branch main

jobs:
  build-and-test: # Seu job de build e teste existente
    runs-on: ubuntu-latest
    outputs:
      # É bom ter certeza que este job realmente passou para o próximo
      status: ${{ job.status }} 
    steps:
      # ... (Seus passos de Checkout, Setup Node, Install deps, Jest, Iniciar server, Wait-on, Newman E2E) ...
      # Certifique-se de que este job está passando completamente antes de tentar o próximo.
      # Você deve ter o fluxo de wait-on + newman aqui, conforme a Tentativa B da nossa conversa anterior.
      # Exemplo de como seu job build-and-test deve estar, com as correções mais recentes:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Node.js (v20) e Cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Instalar dependências Node.js
        run: npm install

      - name: Executar testes unitários/integração Node.js (Jest)
        run: npm test

      - name: Iniciar servidor Node.js em background
        run: npm run start &

      - name: Aguardar servidor Node.js estar pronto (wait-on)
        run: npm install -g wait-on && wait-on http://localhost:3000 -t 60000

      - name: Executar testes de API Node.js (Newman E2E)
        run: npm run test:e2e # Este deve ser "newman run postman_collection.json" no seu package.json agora.


  deploy-docker: # NOVO JOB para build e push da imagem Docker
    runs-on: ubuntu-latest
    needs: build-and-test # Este job só roda se 'build-and-test' for bem-sucedido
    if: success() && github.ref == 'refs/heads/main' # Só roda se o job anterior for sucesso e for na main branch

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Fazer Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construir e Enviar Imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: . # Onde o Dockerfile está (raiz do repositório)
          push: true # Enviar para o Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/ci-cd-test-app:latest # Nome da sua imagem e tag. Altere 'ci-cd-test-app' para o nome do seu app
